******DevOps & AWS Interview Questions****** 
 
General Questions
1- Introduce yourself. 
2- Describe a challenge you faced as a devops engineer and how you overcame it. 
3- Would you like to work individually or in a team. 
4 - Tell me about something where you got a chance to learn and implement from scratch. 
5- How would you be handling a situation where you are not getting any help from your team members. 
 
AWS Questions: 
1- Launch template vs launch configuration. 
2- How do you communicate with AWS services privately without exposing to internet. 
3- NAT g/w vs NAT instance v/s Egress only IGW v/s IGW 
4- Design a 3 tier infrastructure using the AWS services which should be secure and highly available. 
5- Statefull v/s stateless firewalls. 
6- Differentiate between NLB and ALB. 
7- You want to redirect traffic from x.company.in to company.in/x, how to achieve it. 
8- Your database initially performs well, but after certain month you face slowness. How to troubleshoot and fix the same. 
 
K8s: 
1- K8s architecture 
2- Deployment v/s stateful set v/s replica set 
3- What is config map 
4- Role of etcd in kubernetes. 
5- How rolling updates work in a deployment? 
 
Docker: 
1- ADD v/s COPY 
2- Entrypoint v/s CMD 
3- How to remove all unwanted or unused docker objects from system? 
4- Multistage docker build. 
5- Is docker file immutable 
 
Terraform: 
1- What does terraform init do ? 
2- How to auto approve the terraform changes? 
3- count v/s foreach 
4- How to import an existing resource to terraform? 
5- Data black in terraform. 
6- What are provisioners in terraform? 
7- Remote backend. 
 
Linux: 
1- How to check the list of installed packages? 
2- Command to check kernel version. 
3- How to create a new user and add it as sudo? 
4- Command to check if a process called "a" is running or not. If running how stop it. 
5- Command to list all files less than 5mb. 
6- Hard link v/s soft link. 
7- Commands to check disk space usage and free RAM. 
 
CI/CD: 
1- Git fetch v/s Git pull 
2- Sonarqube quality gate vs quality profile. 
3- What is sonar runner. 
4- Types of pipeline in Jenkins. 
5- Scripted vs Declarative pipeline. 
6- Should we prefer artifactory to store artifacts or should we store them in s3. 
7- How to upgrade plugins in Jenkins. 
8- Usermanagement in Jenkins. 
9- Concepts about Gitlab runners. 
10- How to upgrade Jenkins. 
 
Ansible: 
1- loops in Ansible. 
2- Ansible Roles. 
3- Is Ansible idempotent? 
4- Ansible script to install nginx. 
5- Conditionals in Ansible. 


******Kubernetes Interview Question******
1. What is Kubernetes, and why is it used?
2. Explain the components of the Kubernetes master and worker nodes.
3. What are Pods in Kubernetes?
4. What is the difference between a Pod and a Node?
5. What is a Namespace, and why is it used?
6. How does Kubernetes handle Pod failures?
7. What are the different types of workloads in Kubernetes?
8. How does a Deployment work?
9. What is a StatefulSet, and when would you use it?
10. Explain DaemonSets and provide a use case for them.
11. What is the difference between ReplicationController, ReplicaSet, and Deployment?
12. What is a Service in Kubernetes, and what are the different types?
13. How does Kubernetes manage internal and external networking?
14. What is a ClusterIP, NodePort, and LoadBalancer Service?
15. Explain Ingress in Kubernetes and its use case.
16. How does DNS work within a Kubernetes cluster?
17. What are Persistent Volumes (PVs) and Persistent Volume Claims (PVCs)?
18. Explain the process of binding a PV to a PVC.
19. What is a StorageClass, and how does it relate to dynamic provisioning?
20. How are ConfigMaps used in Kubernetes?
21. What is the difference between ConfigMaps and Secrets?
22. How can you securely manage secrets in Kubernetes?
23. How do you scale Pods in Kubernetes?
24. What is the Horizontal Pod Autoscaler (HPA), and how does it work?
25. How does Cluster Autoscaler differ from HPA?
26. What is Role-Based Access Control (RBAC) in Kubernetes?
27. Explain the difference between Role and ClusterRole.
28. What is a ServiceAccount, and why would you use it?
29. How can you implement network policies for Pod communication?
30. How do you monitor Kubernetes clusters?
31. What tools would you use to monitor and log Kubernetes applications?
32. What is node affinity?
33. What is StaticPods?
34. What is Taint and Toleration?
35. What is Sidecar Containers and their purpose?
36. How to debug specific container logs?Consider there are 2 containers running inside a single pod?
37. What are the different deployment strategies in Kubernetes?
38. Describe the process of rolling update in Kubernetes?


****** Some Linux Interview Question *****
1. What is the boot process in Linux?
2. How can you create a zero-size file in Linux?
3. What are 𝘀𝗼𝗳𝘁 𝗹𝗶𝗻𝗸𝘀 and 𝗵𝗮𝗿𝗱 𝗹𝗶𝗻𝗸𝘀 in Linux? How do you create them? What are the differences between these two types of links?
4. What is the first line typically written in a shell script? What is its meaning? What happens if this line is omitted, and how do you run the script in such a case?
5. How can you run a shell script in the background in Linux?
6. What is a 𝗰𝗿𝗼𝗻𝘁𝗮𝗯 in Linux? Explain how it works and how to configure and schedule a job using crontab.
7. How do you allow ports in Linux?
8. How do you troubleshoot a remote server that is experiencing issues?
9. What are the 𝗽𝗶𝗻𝗴, 𝘁𝗲𝗹𝗻𝗲𝘁, 𝗰𝘂𝗿𝗹, and 𝘄𝗴𝗲𝘁 commands in Linux?
10. How can you check the status of services in a Linux machine?
11. How do you kill a process in Linux?
12. What are the 𝗻𝗶𝗰𝗲 and 𝗿𝗲𝗻𝗶𝗰𝗲 commands in Linux?
13. What is an 𝗶𝗻𝗼𝗱𝗲 in Linux?
14. How do you check CPU utilization in Linux?
15. What are the differences between the 𝘁𝗼𝗽 and 𝗵𝘁𝗼𝗽 commands?
16. What is a 𝗺𝗼𝘂𝗻𝘁 in Linux, and how do you create one?
17. How do you troubleshoot live logs in Linux?
18. What is the 𝘀𝗲𝗱 command in Linux?
19. What is the 𝗮𝘄𝗸 command in Linux?
20. What are the 𝗴𝗿𝗲𝗽 and 𝗲𝗴𝗿𝗲𝗽 commands in Linux?
21. How can you list only directories in a Linux environment?
22. How do you check the processes running in Linux?
23. How do you get a Java thread dump in Linux?
24. How can you check the running ports on a Linux machine?
25. How do you declare a variable in a shell script?
26. What do $?, $#, and $* represent in shell scripting?
27. How do you read a command line input in a shell script?
28. What is 𝘂𝗺𝗮𝘀𝗸 in Linux?
29. How do you change file permissions in Linux?
30. How can you connect to remote servers without a password? How is this achieved?
31. How do you open a file in read-only mode in the vi editor?
32. What is the purpose of the 𝗲𝘅𝗽𝗼𝗿𝘁 command in Linux?
33. How do you send 𝗲𝗿𝗿𝗼𝗿 𝗹𝗼𝗴𝘀 and 𝘀𝘁𝗱𝗼𝘂𝘁 𝗹𝗼𝗴𝘀 to different files in Linux?
34. What is the 𝗻𝗼𝗵𝘂𝗽 command in Linux?
35. What does the 𝗻𝗲𝘁𝘀𝘁𝗮𝘁 command do in Linux?



.... Helm Interview Question ....
1. What is Helm, and why is it used?
2. Explain the components of a Helm Chart.
3. What are Helm Charts, and what is their purpose in Kubernetes?
4. How does Helm help with managing Kubernetes applications?
5. What are the key differences between Helm 2 and Helm 3?
6. How do you create a new Helm Chart?
7. How do you install, upgrade, and delete a Helm release?
8. What is a release in Helm, and how does it work?
9. How does Helm handle versioning for Charts and releases?
10. How can you roll back a Helm release to a previous version?
11. What are the main files and directories in a Helm Chart?
12. Explain the purpose of the values.yaml file in Helm.
13. What is the Chart.yaml file, and what information does it contain?
14. How are templates used in Helm Charts, and what is the role of the templates/ directory?
15. What is helpers.tpl, and how can it simplify templating in Helm?
16. How do you pass custom values to a Helm Chart during installation?
17. What is the difference between values.yaml and a custom --set parameter?
18. How do you manage sensitive information in Helm (e.g., API keys, passwords)?
19. How does Helm handle environment-specific configurations?
20. How can you debug a failed Helm installation or upgrade?
21. What is a Helm repository, and how do you add one?
22. How do you search for a specific Chart in a Helm repository?
23. Explain the process of updating a Helm Chart from a repository.
24. How can you create and host your own Helm repository?
25. What is the helm repo update command used for?
26. What are subcharts, and how are they used in Helm?
27. What is the purpose of requirements.yaml (in Helm 2) or Chart.yaml (in Helm 3) for dependencies?
28. Explain how Helm manages dependencies between Charts.
29. How does Helm perform templating with Go templates?
30. What is helmfile, and how does it enhance Helm?
31. How do you automate Helm releases in a CI/CD pipeline?
32. How would you handle rollbacks or updates of Helm releases in production?
33. What is the purpose of the --atomic flag in Helm?
34. How does Helm's --wait flag work, and why is it used in CI/CD?
35. What are Helm hooks, and how can they be used for lifecycle management?
36. How do you run a script at 𝗯𝗼𝗼𝘁 𝗹𝗲𝘃𝗲𝗹 in Linux?


Common Asked DevOps Interview Questions
1. How can you revert multiple commits without affecting the commit history in Git?
2. Explain the difference between git revert, git reset, and git checkout. When would you use each?
3. If you need to squash commits after pushing, how would you do it safely?
4. Explain the process of rebasing in Git. How can it be useful in a collaborative project?
5. What is a Git rebase conflict, and how would you resolve it?
6. If an EC2 instance is accidentally terminated, how would you restore it?
7. What steps would you take if an EC2 instance fails to launch due to "InsufficientInstanceCapacity"?
8. How can you create a snapshot of a root volume in AWS without stopping the instance?
9. Write a Jenkins pipeline script for Terraform deployment.
10. How to create 10 EC2 machines with incremental values like 0,1,2, etc.
11. How to terminate 9 EC2 instances and leave one EC2 machine running.
12. How to connect on-premise to an application in a VPC cloud.
 13. Explain the process of creating a custom Amazon Machine Image (AMI) from an EC2 instance.
14. What are the implications of not using Elastic IP for a production EC2 instance?
15. Explain how to set up cross-account access for an S3 bucket.
16. If you need to allow access to specific IP addresses to an S3 bucket, how would you configure it?

Git commands I used 99% of the time being a DevOps Engineer .

𝟭. 𝗴𝗶𝘁 𝗱𝗶𝗳𝗳: Show file differences not yet staged.
𝟮. 𝗴𝗶𝘁 𝗰𝗼𝗺𝗺𝗶𝘁 -𝗮 -𝗺 "𝗰𝗼𝗺𝗺𝗶𝘁 𝗺𝗲𝘀𝘀𝗮𝗴𝗲": Commit all tracked changes with a message.
𝟯. 𝗴𝗶𝘁 𝘀𝘁𝗮𝘁𝘂𝘀: Show the state of your working directory.
𝟰. 𝗴𝗶𝘁 𝗮𝗱𝗱 𝗳𝗶𝗹𝗲_𝗽𝗮𝘁𝗵:Add file(s) to the staging area.
𝟱. 𝗴𝗶𝘁 𝗰𝗵𝗲𝗰𝗸𝗼𝘂𝘁 -𝗯 𝗯𝗿𝗮𝗻𝗰𝗵_𝗻𝗮𝗺𝗲: Create and switch to a new branch.
𝟲. 𝗴𝗶𝘁 𝗰𝗵𝗲𝗰𝗸𝗼𝘂𝘁 𝗯𝗿𝗮𝗻𝗰𝗵_𝗻𝗮𝗺𝗲: Switch to an existing branch.
𝟳. 𝗴𝗶𝘁 𝗰𝗼𝗺𝗺𝗶𝘁 --𝗮𝗺𝗲𝗻𝗱:Modify the last commit.
𝟴. 𝗴𝗶𝘁 𝗽𝘂𝘀𝗵 𝗼𝗿𝗶𝗴𝗶𝗻 𝗯𝗿𝗮𝗻𝗰𝗵_𝗻𝗮𝗺𝗲: Push a branch to a remote.
𝟵. 𝗴𝗶𝘁 𝗽𝘂𝗹𝗹: Fetch and merge remote changes.
𝟭𝟬. 𝗴𝗶𝘁 𝗿𝗲𝗯𝗮𝘀𝗲 -𝗶: Rebase interactively, rewrite commit history.
𝟭𝟭. 𝗴𝗶𝘁 𝗰𝗹𝗼𝗻𝗲: Create a local copy of a remote repo.
𝟭𝟮. 𝗴𝗶𝘁 𝗺𝗲𝗿𝗴𝗲: Merge branches together.
𝟭𝟯. 𝗴𝗶𝘁 𝗹𝗼𝗴 --𝘀𝘁𝗮𝘁: Show commit logs with stats.
𝟭𝟰. 𝗴𝗶𝘁 𝘀𝘁𝗮𝘀𝗵: Stash changes for later.
𝟭𝟱. 𝗴𝗶𝘁 𝘀𝘁𝗮𝘀𝗵 𝗽𝗼𝗽: Apply and remove stashed changes.
𝟭𝟲. 𝗴𝗶𝘁 𝘀𝗵𝗼𝘄 𝗰𝗼𝗺𝗺𝗶𝘁_𝗶𝗱: Show details about a commit.
𝟭𝟳. 𝗴𝗶𝘁 𝗿𝗲𝘀𝗲𝘁 𝗛𝗘𝗔𝗗~𝟭: Undo the last commit, preserving changes locally.
𝟭𝟴. 𝗴𝗶𝘁 𝗳𝗼𝗿𝗺𝗮𝘁-𝗽𝗮𝘁𝗰𝗵 -𝟭 𝗰𝗼𝗺𝗺𝗶𝘁_𝗶𝗱: Create a patch file for a specific commit.
𝟭𝟵. 𝗴𝗶𝘁 𝗮𝗽𝗽𝗹𝘆 𝗽𝗮𝘁𝗰𝗵_𝗳𝗶𝗹𝗲_𝗻𝗮𝗺𝗲: Apply changes from a patch file.
𝟮𝟬. 𝗴𝗶𝘁 𝗯𝗿𝗮𝗻𝗰𝗵 -𝗗 𝗯𝗿𝗮𝗻𝗰𝗵_𝗻𝗮𝗺𝗲: Delete a branch forcefully.
𝟮𝟭. 𝗴𝗶𝘁 𝗿𝗲𝘀𝗲𝘁: Undo commits by moving branch reference.
𝟮𝟮. 𝗴𝗶𝘁 𝗿𝗲𝘃𝗲𝗿𝘁: Undo commits by creating a new commit.
𝟮𝟯. 𝗴𝗶𝘁 𝗰𝗵𝗲𝗿𝗿𝘆-𝗽𝗶𝗰𝗸 𝗰𝗼𝗺𝗺𝗶𝘁_𝗶𝗱: Apply changes from a specific commit.
𝟮𝟰. 𝗴𝗶𝘁 𝗯𝗿𝗮𝗻𝗰𝗵: Lists branches.
𝟮𝟱. 𝗴𝗶𝘁 𝗿𝗲𝘀𝗲𝘁 --𝗵𝗮𝗿𝗱: Resets everything to a previous commit, erasing all uncommitted changes.


Real-time interview questions and answers 💬 related to Ansible:-

1. How would you ensure that a specific package is installed on multiple servers?
Answer: You can use the package module in a playbook to ensure that a specific package is installed across multiple servers. 

2. How do you handle different environments (development, testing, production) with Ansible?
Answer: You can manage different environments by using inventory files and group variables. Create separate inventory files for each environment and use group variables to specify environment-specific configurations. Each hosts file would define the servers for that specific environment, and you can create a group_vars directory for each environment.

3. How would you restart a service after updating a configuration file?
Answer: You can use the notify feature in Ansible to restart a service after a configuration file is updated.

4. How can you ensure idempotency in your Ansible playbook?
Answer: Ansible modules are designed to be idempotent, meaning they can be run multiple times without changing the result beyond the initial application. For instance, if you use the file module to create a file, Ansible will check if the file already exists before trying to create it.

5. How do you handle secrets or sensitive data in Ansible?
Answer: You can handle sensitive data using Ansible Vault, which allows you to encrypt files or variables. 

6. Can you explain how you would deploy an application using Ansible?
Answer: Define Inventory: Create an inventory file with the target hosts.
Create a Playbook: Write a playbook that includes tasks for pulling the application code from a repository, installing dependencies, configuring files, and starting services.

7. How would you handle task failures and retries in Ansible?
Answer: You can use the retry and when directives to handle task failures in Ansible. The retries and delay parameters can be specified for tasks that might need to be retried.

8. How would you roll back a deployment if the new version fails?
Answer: To roll back a deployment, you can maintain a previous version of the application and use a playbook that checks the health of the new version before deciding to switch back.

9. How can you manage firewall rules across multiple servers using Ansible?
Answer: You can use the firewalld or iptables modules to manage firewall rules. 

10. How do you implement a continuous deployment pipeline using Ansible?
Answer: To implement a continuous deployment pipeline, you can integrate Ansible with a CI/CD tool like Jenkins, GitLab CI, or GitHub Actions. 

11. How can you check if a file exists and create it if it doesn't?
Answer: You can use the stat module to check if a file exists and then use the copy or template module to create it if it doesn’t.

12. How can you execute a command on remote hosts and capture its output?
Answer: You can use the command or shell module to run commands on remote hosts and register the output.


1. **What is Docker?**
 Docker is a platform that allows developers to automate the deployment of applications inside lightweight, portable containers. These containers package an app and its dependencies into a single, consistent environment that runs anywhere.

2. **Containers vs Virtual Machines**
 Containers are faster and more efficient than virtual machines because they share the host system’s OS kernel, whereas VMs run their own OS. This means containers are lightweight, fast, and require less overhead.

3. **Key Concepts:**
 - **Images**: Immutable templates for creating containers.
 - **Containers**: Running instances of Docker images.
 - **Dockerfile**: A script that contains instructions to build a Docker image.
 - **Docker Hub**: A public registry for sharing Docker images.

4. **Why Docker?**
 - Simplifies development and testing by ensuring consistent environments across different stages (dev, test, prod).
 - Makes scaling applications easier by managing microservices efficiently.
 - Facilitates collaboration among teams by providing a common, reproducible environment.

5. **Docker Compose**
 With Docker Compose, I was able to define and run multi-container Docker applications. This tool makes managing complex setups a breeze!




